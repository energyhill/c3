import { OnDestroy, OnInit, OnChanges, EventEmitter, ElementRef, SimpleChanges, NgZone } from '@angular/core';
import * as Chart from 'chart.js';
import { StoreService } from './store.service';
import { NgChartjsService } from './ng-chartjs.service';
import { Colors } from './colors';
import * as ɵngcc0 from '@angular/core';
export declare type Labels = Array<string | string[] | number | number[] | Date | Date[] | any | any[]>;
export declare type Orientation = 'oldest' | 'latest';
export interface NgChartjsEvent {
    event: MouseEvent;
    active: Array<{}>;
}
export declare class NgChartjsDirective implements OnDestroy, OnChanges, OnInit {
    private ngChartjsService;
    private storeService;
    private zone;
    data: number[] | any[];
    datasets: Chart.ChartDataSets[];
    labels: Labels;
    options: Chart.ChartOptions;
    inlinePlugins: any[];
    chartType: Chart.ChartType;
    colors: Colors[];
    legend: boolean;
    adding: {
        labels: Labels[];
        data: any[][];
    };
    removing: {
        orientation: Orientation;
    };
    resetOption: Chart.ChartType;
    noZone: boolean;
    id: string;
    chartClick: EventEmitter<NgChartjsEvent>;
    chartHover: EventEmitter<NgChartjsEvent>;
    chart: Chart;
    private ctx;
    private initFlag;
    private hasChanges;
    private element;
    constructor(element: ElementRef, ngChartjsService: NgChartjsService, storeService: StoreService, zone: NgZone);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    update(): void;
    addData(labels: Labels[], data: any[][]): void;
    removeData(orientation: Orientation): void;
    private refresh;
    private removeChart;
    private addChart;
    private updateChartData;
    private getChartBuilder;
    private getDatasets;
    private updateColors;
    private addData_;
    private removeData_;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgChartjsDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NgChartjsDirective, "canvas[ngChartjs]", ["ngChartjs"], { "labels": "labels"; "options": "options"; "noZone": "noZone"; "id": "id"; "data": "data"; "datasets": "datasets"; "inlinePlugins": "inlinePlugins"; "chartType": "chartType"; "colors": "colors"; "legend": "legend"; "adding": "adding"; "removing": "removing"; "resetOption": "resetOption"; }, { "chartClick": "chartClick"; "chartHover": "chartHover"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRqcy5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsibmctY2hhcnRqcy5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkRlc3Ryb3ksIE9uSW5pdCwgT25DaGFuZ2VzLCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIFNpbXBsZUNoYW5nZXMsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgQ2hhcnQgZnJvbSAnY2hhcnQuanMnO1xuaW1wb3J0IHsgU3RvcmVTZXJ2aWNlIH0gZnJvbSAnLi9zdG9yZS5zZXJ2aWNlJztcbmltcG9ydCB7IE5nQ2hhcnRqc1NlcnZpY2UgfSBmcm9tICcuL25nLWNoYXJ0anMuc2VydmljZSc7XG5pbXBvcnQgeyBDb2xvcnMgfSBmcm9tICcuL2NvbG9ycyc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIExhYmVscyA9IEFycmF5PHN0cmluZyB8IHN0cmluZ1tdIHwgbnVtYmVyIHwgbnVtYmVyW10gfCBEYXRlIHwgRGF0ZVtdIHwgYW55IHwgYW55W10+O1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBPcmllbnRhdGlvbiA9ICdvbGRlc3QnIHwgJ2xhdGVzdCc7XG5leHBvcnQgaW50ZXJmYWNlIE5nQ2hhcnRqc0V2ZW50IHtcbiAgICBldmVudDogTW91c2VFdmVudDtcbiAgICBhY3RpdmU6IEFycmF5PHt9Pjtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5nQ2hhcnRqc0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBPbkluaXQge1xuICAgIHByaXZhdGUgbmdDaGFydGpzU2VydmljZTtcbiAgICBwcml2YXRlIHN0b3JlU2VydmljZTtcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgZGF0YTogbnVtYmVyW10gfCBhbnlbXTtcbiAgICBkYXRhc2V0czogQ2hhcnQuQ2hhcnREYXRhU2V0c1tdO1xuICAgIGxhYmVsczogTGFiZWxzO1xuICAgIG9wdGlvbnM6IENoYXJ0LkNoYXJ0T3B0aW9ucztcbiAgICBpbmxpbmVQbHVnaW5zOiBhbnlbXTtcbiAgICBjaGFydFR5cGU6IENoYXJ0LkNoYXJ0VHlwZTtcbiAgICBjb2xvcnM6IENvbG9yc1tdO1xuICAgIGxlZ2VuZDogYm9vbGVhbjtcbiAgICBhZGRpbmc6IHtcbiAgICAgICAgbGFiZWxzOiBMYWJlbHNbXTtcbiAgICAgICAgZGF0YTogYW55W11bXTtcbiAgICB9O1xuICAgIHJlbW92aW5nOiB7XG4gICAgICAgIG9yaWVudGF0aW9uOiBPcmllbnRhdGlvbjtcbiAgICB9O1xuICAgIHJlc2V0T3B0aW9uOiBDaGFydC5DaGFydFR5cGU7XG4gICAgbm9ab25lOiBib29sZWFuO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgY2hhcnRDbGljazogRXZlbnRFbWl0dGVyPE5nQ2hhcnRqc0V2ZW50PjtcbiAgICBjaGFydEhvdmVyOiBFdmVudEVtaXR0ZXI8TmdDaGFydGpzRXZlbnQ+O1xuICAgIGNoYXJ0OiBDaGFydDtcbiAgICBwcml2YXRlIGN0eDtcbiAgICBwcml2YXRlIGluaXRGbGFnO1xuICAgIHByaXZhdGUgaGFzQ2hhbmdlcztcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudFJlZiwgbmdDaGFydGpzU2VydmljZTogTmdDaGFydGpzU2VydmljZSwgc3RvcmVTZXJ2aWNlOiBTdG9yZVNlcnZpY2UsIHpvbmU6IE5nWm9uZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHVwZGF0ZSgpOiB2b2lkO1xuICAgIGFkZERhdGEobGFiZWxzOiBMYWJlbHNbXSwgZGF0YTogYW55W11bXSk6IHZvaWQ7XG4gICAgcmVtb3ZlRGF0YShvcmllbnRhdGlvbjogT3JpZW50YXRpb24pOiB2b2lkO1xuICAgIHByaXZhdGUgcmVmcmVzaDtcbiAgICBwcml2YXRlIHJlbW92ZUNoYXJ0O1xuICAgIHByaXZhdGUgYWRkQ2hhcnQ7XG4gICAgcHJpdmF0ZSB1cGRhdGVDaGFydERhdGE7XG4gICAgcHJpdmF0ZSBnZXRDaGFydEJ1aWxkZXI7XG4gICAgcHJpdmF0ZSBnZXREYXRhc2V0cztcbiAgICBwcml2YXRlIHVwZGF0ZUNvbG9ycztcbiAgICBwcml2YXRlIGFkZERhdGFfO1xuICAgIHByaXZhdGUgcmVtb3ZlRGF0YV87XG59XG4iXX0=