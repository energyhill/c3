import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { DateFormatter } from './date-formatter';
import * as ɵngcc0 from '@angular/core';
export declare class DatePickerInnerComponent implements OnInit, OnChanges {
    locale: string;
    datepickerMode: string;
    startingDay: number;
    yearRange: number;
    minDate: Date;
    maxDate: Date;
    minMode: string;
    maxMode: string;
    showWeeks: boolean;
    formatDay: string;
    formatMonth: string;
    formatYear: string;
    formatDayHeader: string;
    formatDayTitle: string;
    formatMonthTitle: string;
    onlyCurrentMonth: boolean;
    shortcutPropagation: boolean;
    customClass: {
        date: Date;
        mode: string;
        clazz: string;
    }[];
    monthColLimit: number;
    yearColLimit: number;
    dateDisabled: {
        date: Date;
        mode: string;
    }[];
    dayDisabled: number[];
    initDate: Date;
    selectionDone: EventEmitter<Date>;
    update: EventEmitter<Date>;
    activeDateChange: EventEmitter<Date>;
    stepDay: any;
    stepMonth: any;
    stepYear: any;
    uniqueId: string;
    protected modes: string[];
    protected dateFormatter: DateFormatter;
    protected _activeDate: Date;
    protected selectedDate: Date;
    protected activeDateId: string;
    protected refreshViewHandlerDay: Function;
    protected compareHandlerDay: Function;
    protected refreshViewHandlerMonth: Function;
    protected compareHandlerMonth: Function;
    protected refreshViewHandlerYear: Function;
    protected compareHandlerYear: Function;
    get activeDate(): Date;
    set activeDate(value: Date);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    checkIfActiveDateGotUpdated(activeDate: any): void;
    setCompareHandler(handler: Function, type: string): void;
    compare(date1: Date, date2: Date): number | undefined;
    setRefreshViewHandler(handler: Function, type: string): void;
    refreshView(): void;
    dateFilter(date: Date, format: string): string;
    isActive(dateObject: any): boolean;
    createDateObject(date: Date, format: string): any;
    split(arr: any[], size: number): any[];
    fixTimeZone(date: Date): Date;
    select(date: Date, isManual?: boolean): void;
    move(direction: number): void;
    toggleMode(_direction: number): void;
    protected getCustomClassForDate(date: Date): string;
    protected compareDateDisabled(date1Disabled: {
        date: Date;
        mode: string;
    }, date2: Date): number;
    protected isDisabled(date: Date): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatePickerInnerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DatePickerInnerComponent, "datepicker-inner", never, { "activeDate": "activeDate"; "datepickerMode": "datepickerMode"; "locale": "locale"; "startingDay": "startingDay"; "yearRange": "yearRange"; "minDate": "minDate"; "maxDate": "maxDate"; "minMode": "minMode"; "maxMode": "maxMode"; "showWeeks": "showWeeks"; "formatDay": "formatDay"; "formatMonth": "formatMonth"; "formatYear": "formatYear"; "formatDayHeader": "formatDayHeader"; "formatDayTitle": "formatDayTitle"; "formatMonthTitle": "formatMonthTitle"; "onlyCurrentMonth": "onlyCurrentMonth"; "shortcutPropagation": "shortcutPropagation"; "customClass": "customClass"; "monthColLimit": "monthColLimit"; "yearColLimit": "yearColLimit"; "dateDisabled": "dateDisabled"; "dayDisabled": "dayDisabled"; "initDate": "initDate"; }, { "selectionDone": "selectionDone"; "update": "update"; "activeDateChange": "activeDateChange"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci1pbm5lci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZGF0ZXBpY2tlci1pbm5lci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRlRm9ybWF0dGVyIH0gZnJvbSAnLi9kYXRlLWZvcm1hdHRlcic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEYXRlUGlja2VySW5uZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gICAgbG9jYWxlOiBzdHJpbmc7XG4gICAgZGF0ZXBpY2tlck1vZGU6IHN0cmluZztcbiAgICBzdGFydGluZ0RheTogbnVtYmVyO1xuICAgIHllYXJSYW5nZTogbnVtYmVyO1xuICAgIG1pbkRhdGU6IERhdGU7XG4gICAgbWF4RGF0ZTogRGF0ZTtcbiAgICBtaW5Nb2RlOiBzdHJpbmc7XG4gICAgbWF4TW9kZTogc3RyaW5nO1xuICAgIHNob3dXZWVrczogYm9vbGVhbjtcbiAgICBmb3JtYXREYXk6IHN0cmluZztcbiAgICBmb3JtYXRNb250aDogc3RyaW5nO1xuICAgIGZvcm1hdFllYXI6IHN0cmluZztcbiAgICBmb3JtYXREYXlIZWFkZXI6IHN0cmluZztcbiAgICBmb3JtYXREYXlUaXRsZTogc3RyaW5nO1xuICAgIGZvcm1hdE1vbnRoVGl0bGU6IHN0cmluZztcbiAgICBvbmx5Q3VycmVudE1vbnRoOiBib29sZWFuO1xuICAgIHNob3J0Y3V0UHJvcGFnYXRpb246IGJvb2xlYW47XG4gICAgY3VzdG9tQ2xhc3M6IHtcbiAgICAgICAgZGF0ZTogRGF0ZTtcbiAgICAgICAgbW9kZTogc3RyaW5nO1xuICAgICAgICBjbGF6ejogc3RyaW5nO1xuICAgIH1bXTtcbiAgICBtb250aENvbExpbWl0OiBudW1iZXI7XG4gICAgeWVhckNvbExpbWl0OiBudW1iZXI7XG4gICAgZGF0ZURpc2FibGVkOiB7XG4gICAgICAgIGRhdGU6IERhdGU7XG4gICAgICAgIG1vZGU6IHN0cmluZztcbiAgICB9W107XG4gICAgZGF5RGlzYWJsZWQ6IG51bWJlcltdO1xuICAgIGluaXREYXRlOiBEYXRlO1xuICAgIHNlbGVjdGlvbkRvbmU6IEV2ZW50RW1pdHRlcjxEYXRlPjtcbiAgICB1cGRhdGU6IEV2ZW50RW1pdHRlcjxEYXRlPjtcbiAgICBhY3RpdmVEYXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RGF0ZT47XG4gICAgc3RlcERheTogYW55O1xuICAgIHN0ZXBNb250aDogYW55O1xuICAgIHN0ZXBZZWFyOiBhbnk7XG4gICAgdW5pcXVlSWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgbW9kZXM6IHN0cmluZ1tdO1xuICAgIHByb3RlY3RlZCBkYXRlRm9ybWF0dGVyOiBEYXRlRm9ybWF0dGVyO1xuICAgIHByb3RlY3RlZCBfYWN0aXZlRGF0ZTogRGF0ZTtcbiAgICBwcm90ZWN0ZWQgc2VsZWN0ZWREYXRlOiBEYXRlO1xuICAgIHByb3RlY3RlZCBhY3RpdmVEYXRlSWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcmVmcmVzaFZpZXdIYW5kbGVyRGF5OiBGdW5jdGlvbjtcbiAgICBwcm90ZWN0ZWQgY29tcGFyZUhhbmRsZXJEYXk6IEZ1bmN0aW9uO1xuICAgIHByb3RlY3RlZCByZWZyZXNoVmlld0hhbmRsZXJNb250aDogRnVuY3Rpb247XG4gICAgcHJvdGVjdGVkIGNvbXBhcmVIYW5kbGVyTW9udGg6IEZ1bmN0aW9uO1xuICAgIHByb3RlY3RlZCByZWZyZXNoVmlld0hhbmRsZXJZZWFyOiBGdW5jdGlvbjtcbiAgICBwcm90ZWN0ZWQgY29tcGFyZUhhbmRsZXJZZWFyOiBGdW5jdGlvbjtcbiAgICBnZXQgYWN0aXZlRGF0ZSgpOiBEYXRlO1xuICAgIHNldCBhY3RpdmVEYXRlKHZhbHVlOiBEYXRlKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIGNoZWNrSWZBY3RpdmVEYXRlR290VXBkYXRlZChhY3RpdmVEYXRlOiBhbnkpOiB2b2lkO1xuICAgIHNldENvbXBhcmVIYW5kbGVyKGhhbmRsZXI6IEZ1bmN0aW9uLCB0eXBlOiBzdHJpbmcpOiB2b2lkO1xuICAgIGNvbXBhcmUoZGF0ZTE6IERhdGUsIGRhdGUyOiBEYXRlKTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgIHNldFJlZnJlc2hWaWV3SGFuZGxlcihoYW5kbGVyOiBGdW5jdGlvbiwgdHlwZTogc3RyaW5nKTogdm9pZDtcbiAgICByZWZyZXNoVmlldygpOiB2b2lkO1xuICAgIGRhdGVGaWx0ZXIoZGF0ZTogRGF0ZSwgZm9ybWF0OiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgaXNBY3RpdmUoZGF0ZU9iamVjdDogYW55KTogYm9vbGVhbjtcbiAgICBjcmVhdGVEYXRlT2JqZWN0KGRhdGU6IERhdGUsIGZvcm1hdDogc3RyaW5nKTogYW55O1xuICAgIHNwbGl0KGFycjogYW55W10sIHNpemU6IG51bWJlcik6IGFueVtdO1xuICAgIGZpeFRpbWVab25lKGRhdGU6IERhdGUpOiBEYXRlO1xuICAgIHNlbGVjdChkYXRlOiBEYXRlLCBpc01hbnVhbD86IGJvb2xlYW4pOiB2b2lkO1xuICAgIG1vdmUoZGlyZWN0aW9uOiBudW1iZXIpOiB2b2lkO1xuICAgIHRvZ2dsZU1vZGUoX2RpcmVjdGlvbjogbnVtYmVyKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgZ2V0Q3VzdG9tQ2xhc3NGb3JEYXRlKGRhdGU6IERhdGUpOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIGNvbXBhcmVEYXRlRGlzYWJsZWQoZGF0ZTFEaXNhYmxlZDoge1xuICAgICAgICBkYXRlOiBEYXRlO1xuICAgICAgICBtb2RlOiBzdHJpbmc7XG4gICAgfSwgZGF0ZTI6IERhdGUpOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIGlzRGlzYWJsZWQoZGF0ZTogRGF0ZSk6IGJvb2xlYW47XG59XG4iXX0=