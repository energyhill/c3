import { DatepickerRenderOptions, BsDatepickerViewMode, DatepickerDateCustomClasses, DatepickerDateTooltipText } from './models';
import { BsCustomDates } from './themes/bs/bs-custom-dates-view.component';
/**
 * For date range picker there are `BsDaterangepickerConfig` which inherits all properties,
 * except `displayMonths`, for range picker it default to `2`
 */
import * as ɵngcc0 from '@angular/core';
export declare class BsDatepickerConfig implements DatepickerRenderOptions {
    /** sets use adaptive position */
    adaptivePosition: boolean;
    /** sets use UTC date time format */
    useUtc: boolean;
    /** turn on/off animation */
    isAnimated: boolean;
    value?: Date | Date[];
    isDisabled?: boolean;
    /**
     * Default min date for all date/range pickers
     */
    minDate?: Date;
    /**
     * Default max date for all date/range pickers
     */
    maxDate?: Date;
    /**
     * The view that the datepicker should start in
     */
    startView: BsDatepickerViewMode;
    /**
     * Default date custom classes for all date/range pickers
     */
    dateCustomClasses: DatepickerDateCustomClasses[];
    /**
     * Default tooltip text for all date/range pickers
     */
    dateTooltipTexts?: DatepickerDateTooltipText[];
    /**
     * Disable specific days, e.g. [0,6] will disable all Saturdays and Sundays
     */
    daysDisabled?: number[];
    /**
     * Disable specific dates
     */
    datesDisabled?: Date[];
    /**
     * Show one months for special cases (only for dateRangePicker)
     * 1. maxDate is equal to today's date
     * 2. minDate's month is equal to maxDate's month
     */
    displayOneMonthRange?: boolean;
    /**
     * Enable specific dates
     */
    datesEnabled?: Date[];
    /**
     * Makes dates from other months active
     */
    selectFromOtherMonth?: boolean;
    /**
     * Allows select first date of the week by click on week number
     */
    selectWeek?: boolean;
    /**
     * Allows select daterange as first and last day of week by click on week number (dateRangePicker only)
     */
    selectWeekDateRange?: boolean;
    /**
     * Shows previous and current month, instead of current and next (dateRangePicker only)
     */
    showPreviousMonth?: boolean;
    /**
     * Add class to current day
     */
    customTodayClass?: string;
    /**
     * Default mode for all date pickers
     */
    minMode?: BsDatepickerViewMode;
    /**
     * If true, returns focus to the datepicker / daterangepicker input after date selection
     */
    returnFocusToInput: boolean;
    /** CSS class which will be applied to datepicker container,
     * usually used to set color theme
     */
    containerClass: string;
    displayMonths: number;
    /**
     * Allows to hide week numbers in datepicker
     */
    showWeekNumbers: boolean;
    dateInputFormat: string;
    rangeSeparator: string;
    /**
     * Date format for date range input field
     */
    rangeInputFormat: string;
    /**
     * Predefined ranges
     */
    ranges?: BsCustomDates[];
    /**
     * Max Date Range in days
     */
    maxDateRange?: number;
    monthTitle: string;
    yearTitle: string;
    dayLabel: string;
    monthLabel: string;
    yearLabel: string;
    weekNumbers: string;
    /**
     * Shows 'today' button
     */
    showTodayButton: boolean;
    /**
     * Shows clear button
     */
    showClearButton: boolean;
    /**
     * Positioning of 'today' button
     */
    todayPosition: string;
    /**
     * Positioning of 'clear' button
     */
    clearPosition: string;
    /**
     * Label for 'today' button
     */
    todayButtonLabel: string;
    /**
     * Label for 'clear' button
     */
    clearButtonLabel: string;
    /**
     * Label for 'custom range' button
     */
    customRangeButtonLabel: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BsDatepickerConfig, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnMtZGF0ZXBpY2tlci5jb25maWcuZC50cyIsInNvdXJjZXMiOlsiYnMtZGF0ZXBpY2tlci5jb25maWcuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0ZXBpY2tlclJlbmRlck9wdGlvbnMsIEJzRGF0ZXBpY2tlclZpZXdNb2RlLCBEYXRlcGlja2VyRGF0ZUN1c3RvbUNsYXNzZXMsIERhdGVwaWNrZXJEYXRlVG9vbHRpcFRleHQgfSBmcm9tICcuL21vZGVscyc7XG5pbXBvcnQgeyBCc0N1c3RvbURhdGVzIH0gZnJvbSAnLi90aGVtZXMvYnMvYnMtY3VzdG9tLWRhdGVzLXZpZXcuY29tcG9uZW50Jztcbi8qKlxuICogRm9yIGRhdGUgcmFuZ2UgcGlja2VyIHRoZXJlIGFyZSBgQnNEYXRlcmFuZ2VwaWNrZXJDb25maWdgIHdoaWNoIGluaGVyaXRzIGFsbCBwcm9wZXJ0aWVzLFxuICogZXhjZXB0IGBkaXNwbGF5TW9udGhzYCwgZm9yIHJhbmdlIHBpY2tlciBpdCBkZWZhdWx0IHRvIGAyYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBCc0RhdGVwaWNrZXJDb25maWcgaW1wbGVtZW50cyBEYXRlcGlja2VyUmVuZGVyT3B0aW9ucyB7XG4gICAgLyoqIHNldHMgdXNlIGFkYXB0aXZlIHBvc2l0aW9uICovXG4gICAgYWRhcHRpdmVQb3NpdGlvbjogYm9vbGVhbjtcbiAgICAvKiogc2V0cyB1c2UgVVRDIGRhdGUgdGltZSBmb3JtYXQgKi9cbiAgICB1c2VVdGM6IGJvb2xlYW47XG4gICAgLyoqIHR1cm4gb24vb2ZmIGFuaW1hdGlvbiAqL1xuICAgIGlzQW5pbWF0ZWQ6IGJvb2xlYW47XG4gICAgdmFsdWU/OiBEYXRlIHwgRGF0ZVtdO1xuICAgIGlzRGlzYWJsZWQ/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIERlZmF1bHQgbWluIGRhdGUgZm9yIGFsbCBkYXRlL3JhbmdlIHBpY2tlcnNcbiAgICAgKi9cbiAgICBtaW5EYXRlPzogRGF0ZTtcbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IG1heCBkYXRlIGZvciBhbGwgZGF0ZS9yYW5nZSBwaWNrZXJzXG4gICAgICovXG4gICAgbWF4RGF0ZT86IERhdGU7XG4gICAgLyoqXG4gICAgICogVGhlIHZpZXcgdGhhdCB0aGUgZGF0ZXBpY2tlciBzaG91bGQgc3RhcnQgaW5cbiAgICAgKi9cbiAgICBzdGFydFZpZXc6IEJzRGF0ZXBpY2tlclZpZXdNb2RlO1xuICAgIC8qKlxuICAgICAqIERlZmF1bHQgZGF0ZSBjdXN0b20gY2xhc3NlcyBmb3IgYWxsIGRhdGUvcmFuZ2UgcGlja2Vyc1xuICAgICAqL1xuICAgIGRhdGVDdXN0b21DbGFzc2VzOiBEYXRlcGlja2VyRGF0ZUN1c3RvbUNsYXNzZXNbXTtcbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IHRvb2x0aXAgdGV4dCBmb3IgYWxsIGRhdGUvcmFuZ2UgcGlja2Vyc1xuICAgICAqL1xuICAgIGRhdGVUb29sdGlwVGV4dHM/OiBEYXRlcGlja2VyRGF0ZVRvb2x0aXBUZXh0W107XG4gICAgLyoqXG4gICAgICogRGlzYWJsZSBzcGVjaWZpYyBkYXlzLCBlLmcuIFswLDZdIHdpbGwgZGlzYWJsZSBhbGwgU2F0dXJkYXlzIGFuZCBTdW5kYXlzXG4gICAgICovXG4gICAgZGF5c0Rpc2FibGVkPzogbnVtYmVyW107XG4gICAgLyoqXG4gICAgICogRGlzYWJsZSBzcGVjaWZpYyBkYXRlc1xuICAgICAqL1xuICAgIGRhdGVzRGlzYWJsZWQ/OiBEYXRlW107XG4gICAgLyoqXG4gICAgICogU2hvdyBvbmUgbW9udGhzIGZvciBzcGVjaWFsIGNhc2VzIChvbmx5IGZvciBkYXRlUmFuZ2VQaWNrZXIpXG4gICAgICogMS4gbWF4RGF0ZSBpcyBlcXVhbCB0byB0b2RheSdzIGRhdGVcbiAgICAgKiAyLiBtaW5EYXRlJ3MgbW9udGggaXMgZXF1YWwgdG8gbWF4RGF0ZSdzIG1vbnRoXG4gICAgICovXG4gICAgZGlzcGxheU9uZU1vbnRoUmFuZ2U/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEVuYWJsZSBzcGVjaWZpYyBkYXRlc1xuICAgICAqL1xuICAgIGRhdGVzRW5hYmxlZD86IERhdGVbXTtcbiAgICAvKipcbiAgICAgKiBNYWtlcyBkYXRlcyBmcm9tIG90aGVyIG1vbnRocyBhY3RpdmVcbiAgICAgKi9cbiAgICBzZWxlY3RGcm9tT3RoZXJNb250aD86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQWxsb3dzIHNlbGVjdCBmaXJzdCBkYXRlIG9mIHRoZSB3ZWVrIGJ5IGNsaWNrIG9uIHdlZWsgbnVtYmVyXG4gICAgICovXG4gICAgc2VsZWN0V2Vlaz86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQWxsb3dzIHNlbGVjdCBkYXRlcmFuZ2UgYXMgZmlyc3QgYW5kIGxhc3QgZGF5IG9mIHdlZWsgYnkgY2xpY2sgb24gd2VlayBudW1iZXIgKGRhdGVSYW5nZVBpY2tlciBvbmx5KVxuICAgICAqL1xuICAgIHNlbGVjdFdlZWtEYXRlUmFuZ2U/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNob3dzIHByZXZpb3VzIGFuZCBjdXJyZW50IG1vbnRoLCBpbnN0ZWFkIG9mIGN1cnJlbnQgYW5kIG5leHQgKGRhdGVSYW5nZVBpY2tlciBvbmx5KVxuICAgICAqL1xuICAgIHNob3dQcmV2aW91c01vbnRoPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBBZGQgY2xhc3MgdG8gY3VycmVudCBkYXlcbiAgICAgKi9cbiAgICBjdXN0b21Ub2RheUNsYXNzPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIERlZmF1bHQgbW9kZSBmb3IgYWxsIGRhdGUgcGlja2Vyc1xuICAgICAqL1xuICAgIG1pbk1vZGU/OiBCc0RhdGVwaWNrZXJWaWV3TW9kZTtcbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCByZXR1cm5zIGZvY3VzIHRvIHRoZSBkYXRlcGlja2VyIC8gZGF0ZXJhbmdlcGlja2VyIGlucHV0IGFmdGVyIGRhdGUgc2VsZWN0aW9uXG4gICAgICovXG4gICAgcmV0dXJuRm9jdXNUb0lucHV0OiBib29sZWFuO1xuICAgIC8qKiBDU1MgY2xhc3Mgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIGRhdGVwaWNrZXIgY29udGFpbmVyLFxuICAgICAqIHVzdWFsbHkgdXNlZCB0byBzZXQgY29sb3IgdGhlbWVcbiAgICAgKi9cbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nO1xuICAgIGRpc3BsYXlNb250aHM6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdG8gaGlkZSB3ZWVrIG51bWJlcnMgaW4gZGF0ZXBpY2tlclxuICAgICAqL1xuICAgIHNob3dXZWVrTnVtYmVyczogYm9vbGVhbjtcbiAgICBkYXRlSW5wdXRGb3JtYXQ6IHN0cmluZztcbiAgICByYW5nZVNlcGFyYXRvcjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIERhdGUgZm9ybWF0IGZvciBkYXRlIHJhbmdlIGlucHV0IGZpZWxkXG4gICAgICovXG4gICAgcmFuZ2VJbnB1dEZvcm1hdDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFByZWRlZmluZWQgcmFuZ2VzXG4gICAgICovXG4gICAgcmFuZ2VzPzogQnNDdXN0b21EYXRlc1tdO1xuICAgIC8qKlxuICAgICAqIE1heCBEYXRlIFJhbmdlIGluIGRheXNcbiAgICAgKi9cbiAgICBtYXhEYXRlUmFuZ2U/OiBudW1iZXI7XG4gICAgbW9udGhUaXRsZTogc3RyaW5nO1xuICAgIHllYXJUaXRsZTogc3RyaW5nO1xuICAgIGRheUxhYmVsOiBzdHJpbmc7XG4gICAgbW9udGhMYWJlbDogc3RyaW5nO1xuICAgIHllYXJMYWJlbDogc3RyaW5nO1xuICAgIHdlZWtOdW1iZXJzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2hvd3MgJ3RvZGF5JyBidXR0b25cbiAgICAgKi9cbiAgICBzaG93VG9kYXlCdXR0b246IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2hvd3MgY2xlYXIgYnV0dG9uXG4gICAgICovXG4gICAgc2hvd0NsZWFyQnV0dG9uOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFBvc2l0aW9uaW5nIG9mICd0b2RheScgYnV0dG9uXG4gICAgICovXG4gICAgdG9kYXlQb3NpdGlvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFBvc2l0aW9uaW5nIG9mICdjbGVhcicgYnV0dG9uXG4gICAgICovXG4gICAgY2xlYXJQb3NpdGlvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIExhYmVsIGZvciAndG9kYXknIGJ1dHRvblxuICAgICAqL1xuICAgIHRvZGF5QnV0dG9uTGFiZWw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBMYWJlbCBmb3IgJ2NsZWFyJyBidXR0b25cbiAgICAgKi9cbiAgICBjbGVhckJ1dHRvbkxhYmVsOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogTGFiZWwgZm9yICdjdXN0b20gcmFuZ2UnIGJ1dHRvblxuICAgICAqL1xuICAgIGN1c3RvbVJhbmdlQnV0dG9uTGFiZWw6IHN0cmluZztcbn1cbiJdfQ==