import { ChangeDetectorRef, ElementRef, EventEmitter, OnInit, Provider, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { PaginationConfig } from './pagination.config';
import { ConfigModel, PagesModel, PaginationLinkContext, PaginationNumberLinkContext } from './models';
import * as ɵngcc0 from '@angular/core';
export interface PageChangedEvent {
    itemsPerPage: number;
    page: number;
}
export declare const PAGINATION_CONTROL_VALUE_ACCESSOR: Provider;
export declare class PaginationComponent implements ControlValueAccessor, OnInit {
    private elementRef;
    private changeDetection;
    config: ConfigModel;
    /** if `true` aligns each link to the sides of pager */
    align: boolean;
    /** limit number for page links in pager */
    maxSize: number;
    /** if false first and last buttons will be hidden */
    boundaryLinks: boolean;
    /** if false previous and next buttons will be hidden */
    directionLinks: boolean;
    /** first button text */
    firstText: string;
    /** previous button text */
    previousText: string;
    /** next button text */
    nextText: string;
    /** last button text */
    lastText: string;
    /** if true current page will in the middle of pages list */
    rotate: boolean;
    /** add class to <code><li\></code> */
    pageBtnClass: string;
    /** if true pagination component will be disabled */
    disabled: boolean;
    /** custom template for page link */
    customPageTemplate: TemplateRef<PaginationNumberLinkContext>;
    /** custom template for next link */
    customNextTemplate: TemplateRef<PaginationLinkContext>;
    /** custom template for previous link */
    customPreviousTemplate: TemplateRef<PaginationLinkContext>;
    /** custom template for first link */
    customFirstTemplate: TemplateRef<PaginationLinkContext>;
    /** custom template for last link */
    customLastTemplate: TemplateRef<PaginationLinkContext>;
    /** fired when total pages count changes, $event:number equals to total pages count */
    numPages: EventEmitter<number>;
    /** fired when page was changed, $event:{page, itemsPerPage} equals to object
     * with current page index and number of items per page
     */
    pageChanged: EventEmitter<PageChangedEvent>;
    /** maximum number of items per page. If value less than 1 will display all items on one page */
    get itemsPerPage(): number;
    set itemsPerPage(v: number);
    /** total number of items in all pages */
    get totalItems(): number;
    set totalItems(v: number);
    get totalPages(): number;
    set totalPages(v: number);
    set page(value: number);
    get page(): number;
    onChange: Function;
    onTouched: Function;
    classMap: string;
    pages: PagesModel[];
    protected _itemsPerPage: number;
    protected _totalItems: number;
    protected _totalPages: number;
    protected inited: boolean;
    protected _page: number;
    constructor(elementRef: ElementRef, paginationConfig: PaginationConfig, changeDetection: ChangeDetectorRef);
    configureOptions(config: ConfigModel): void;
    ngOnInit(): void;
    writeValue(value: number): void;
    getText(key: string): string;
    noPrevious(): boolean;
    noNext(): boolean;
    registerOnChange(fn: () => {}): void;
    registerOnTouched(fn: () => {}): void;
    selectPage(page: number, event?: Event): void;
    protected makePage(num: number, text: string, active: boolean): {
        number: number;
        text: string;
        active: boolean;
    };
    protected getPages(currentPage: number, totalPages: number): PagesModel[];
    protected calculateTotalPages(): number;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PaginationComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PaginationComponent, "pagination", never, { "itemsPerPage": "itemsPerPage"; "totalItems": "totalItems"; "maxSize": "maxSize"; "rotate": "rotate"; "boundaryLinks": "boundaryLinks"; "directionLinks": "directionLinks"; "pageBtnClass": "pageBtnClass"; "align": "align"; "firstText": "firstText"; "previousText": "previousText"; "nextText": "nextText"; "lastText": "lastText"; "disabled": "disabled"; "customPageTemplate": "customPageTemplate"; "customNextTemplate": "customNextTemplate"; "customPreviousTemplate": "customPreviousTemplate"; "customFirstTemplate": "customFirstTemplate"; "customLastTemplate": "customLastTemplate"; }, { "numPages": "numPages"; "pageChanged": "pageChanged"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicGFnaW5hdGlvbi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgUHJvdmlkZXIsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFBhZ2luYXRpb25Db25maWcgfSBmcm9tICcuL3BhZ2luYXRpb24uY29uZmlnJztcbmltcG9ydCB7IENvbmZpZ01vZGVsLCBQYWdlc01vZGVsLCBQYWdpbmF0aW9uTGlua0NvbnRleHQsIFBhZ2luYXRpb25OdW1iZXJMaW5rQ29udGV4dCB9IGZyb20gJy4vbW9kZWxzJztcbmV4cG9ydCBpbnRlcmZhY2UgUGFnZUNoYW5nZWRFdmVudCB7XG4gICAgaXRlbXNQZXJQYWdlOiBudW1iZXI7XG4gICAgcGFnZTogbnVtYmVyO1xufVxuZXhwb3J0IGRlY2xhcmUgY29uc3QgUEFHSU5BVElPTl9DT05UUk9MX1ZBTFVFX0FDQ0VTU09SOiBQcm92aWRlcjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBhZ2luYXRpb25Db21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25Jbml0IHtcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3Rpb247XG4gICAgY29uZmlnOiBDb25maWdNb2RlbDtcbiAgICAvKiogaWYgYHRydWVgIGFsaWducyBlYWNoIGxpbmsgdG8gdGhlIHNpZGVzIG9mIHBhZ2VyICovXG4gICAgYWxpZ246IGJvb2xlYW47XG4gICAgLyoqIGxpbWl0IG51bWJlciBmb3IgcGFnZSBsaW5rcyBpbiBwYWdlciAqL1xuICAgIG1heFNpemU6IG51bWJlcjtcbiAgICAvKiogaWYgZmFsc2UgZmlyc3QgYW5kIGxhc3QgYnV0dG9ucyB3aWxsIGJlIGhpZGRlbiAqL1xuICAgIGJvdW5kYXJ5TGlua3M6IGJvb2xlYW47XG4gICAgLyoqIGlmIGZhbHNlIHByZXZpb3VzIGFuZCBuZXh0IGJ1dHRvbnMgd2lsbCBiZSBoaWRkZW4gKi9cbiAgICBkaXJlY3Rpb25MaW5rczogYm9vbGVhbjtcbiAgICAvKiogZmlyc3QgYnV0dG9uIHRleHQgKi9cbiAgICBmaXJzdFRleHQ6IHN0cmluZztcbiAgICAvKiogcHJldmlvdXMgYnV0dG9uIHRleHQgKi9cbiAgICBwcmV2aW91c1RleHQ6IHN0cmluZztcbiAgICAvKiogbmV4dCBidXR0b24gdGV4dCAqL1xuICAgIG5leHRUZXh0OiBzdHJpbmc7XG4gICAgLyoqIGxhc3QgYnV0dG9uIHRleHQgKi9cbiAgICBsYXN0VGV4dDogc3RyaW5nO1xuICAgIC8qKiBpZiB0cnVlIGN1cnJlbnQgcGFnZSB3aWxsIGluIHRoZSBtaWRkbGUgb2YgcGFnZXMgbGlzdCAqL1xuICAgIHJvdGF0ZTogYm9vbGVhbjtcbiAgICAvKiogYWRkIGNsYXNzIHRvIDxjb2RlPjxsaVxcPjwvY29kZT4gKi9cbiAgICBwYWdlQnRuQ2xhc3M6IHN0cmluZztcbiAgICAvKiogaWYgdHJ1ZSBwYWdpbmF0aW9uIGNvbXBvbmVudCB3aWxsIGJlIGRpc2FibGVkICovXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqIGN1c3RvbSB0ZW1wbGF0ZSBmb3IgcGFnZSBsaW5rICovXG4gICAgY3VzdG9tUGFnZVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxQYWdpbmF0aW9uTnVtYmVyTGlua0NvbnRleHQ+O1xuICAgIC8qKiBjdXN0b20gdGVtcGxhdGUgZm9yIG5leHQgbGluayAqL1xuICAgIGN1c3RvbU5leHRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8UGFnaW5hdGlvbkxpbmtDb250ZXh0PjtcbiAgICAvKiogY3VzdG9tIHRlbXBsYXRlIGZvciBwcmV2aW91cyBsaW5rICovXG4gICAgY3VzdG9tUHJldmlvdXNUZW1wbGF0ZTogVGVtcGxhdGVSZWY8UGFnaW5hdGlvbkxpbmtDb250ZXh0PjtcbiAgICAvKiogY3VzdG9tIHRlbXBsYXRlIGZvciBmaXJzdCBsaW5rICovXG4gICAgY3VzdG9tRmlyc3RUZW1wbGF0ZTogVGVtcGxhdGVSZWY8UGFnaW5hdGlvbkxpbmtDb250ZXh0PjtcbiAgICAvKiogY3VzdG9tIHRlbXBsYXRlIGZvciBsYXN0IGxpbmsgKi9cbiAgICBjdXN0b21MYXN0VGVtcGxhdGU6IFRlbXBsYXRlUmVmPFBhZ2luYXRpb25MaW5rQ29udGV4dD47XG4gICAgLyoqIGZpcmVkIHdoZW4gdG90YWwgcGFnZXMgY291bnQgY2hhbmdlcywgJGV2ZW50Om51bWJlciBlcXVhbHMgdG8gdG90YWwgcGFnZXMgY291bnQgKi9cbiAgICBudW1QYWdlczogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgLyoqIGZpcmVkIHdoZW4gcGFnZSB3YXMgY2hhbmdlZCwgJGV2ZW50OntwYWdlLCBpdGVtc1BlclBhZ2V9IGVxdWFscyB0byBvYmplY3RcbiAgICAgKiB3aXRoIGN1cnJlbnQgcGFnZSBpbmRleCBhbmQgbnVtYmVyIG9mIGl0ZW1zIHBlciBwYWdlXG4gICAgICovXG4gICAgcGFnZUNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxQYWdlQ2hhbmdlZEV2ZW50PjtcbiAgICAvKiogbWF4aW11bSBudW1iZXIgb2YgaXRlbXMgcGVyIHBhZ2UuIElmIHZhbHVlIGxlc3MgdGhhbiAxIHdpbGwgZGlzcGxheSBhbGwgaXRlbXMgb24gb25lIHBhZ2UgKi9cbiAgICBnZXQgaXRlbXNQZXJQYWdlKCk6IG51bWJlcjtcbiAgICBzZXQgaXRlbXNQZXJQYWdlKHY6IG51bWJlcik7XG4gICAgLyoqIHRvdGFsIG51bWJlciBvZiBpdGVtcyBpbiBhbGwgcGFnZXMgKi9cbiAgICBnZXQgdG90YWxJdGVtcygpOiBudW1iZXI7XG4gICAgc2V0IHRvdGFsSXRlbXModjogbnVtYmVyKTtcbiAgICBnZXQgdG90YWxQYWdlcygpOiBudW1iZXI7XG4gICAgc2V0IHRvdGFsUGFnZXModjogbnVtYmVyKTtcbiAgICBzZXQgcGFnZSh2YWx1ZTogbnVtYmVyKTtcbiAgICBnZXQgcGFnZSgpOiBudW1iZXI7XG4gICAgb25DaGFuZ2U6IEZ1bmN0aW9uO1xuICAgIG9uVG91Y2hlZDogRnVuY3Rpb247XG4gICAgY2xhc3NNYXA6IHN0cmluZztcbiAgICBwYWdlczogUGFnZXNNb2RlbFtdO1xuICAgIHByb3RlY3RlZCBfaXRlbXNQZXJQYWdlOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIF90b3RhbEl0ZW1zOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIF90b3RhbFBhZ2VzOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIGluaXRlZDogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgX3BhZ2U6IG51bWJlcjtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwYWdpbmF0aW9uQ29uZmlnOiBQYWdpbmF0aW9uQ29uZmlnLCBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBjb25maWd1cmVPcHRpb25zKGNvbmZpZzogQ29uZmlnTW9kZWwpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogbnVtYmVyKTogdm9pZDtcbiAgICBnZXRUZXh0KGtleTogc3RyaW5nKTogc3RyaW5nO1xuICAgIG5vUHJldmlvdXMoKTogYm9vbGVhbjtcbiAgICBub05leHQoKTogYm9vbGVhbjtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoKSA9PiB7fSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHt9KTogdm9pZDtcbiAgICBzZWxlY3RQYWdlKHBhZ2U6IG51bWJlciwgZXZlbnQ/OiBFdmVudCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIG1ha2VQYWdlKG51bTogbnVtYmVyLCB0ZXh0OiBzdHJpbmcsIGFjdGl2ZTogYm9vbGVhbik6IHtcbiAgICAgICAgbnVtYmVyOiBudW1iZXI7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgICAgYWN0aXZlOiBib29sZWFuO1xuICAgIH07XG4gICAgcHJvdGVjdGVkIGdldFBhZ2VzKGN1cnJlbnRQYWdlOiBudW1iZXIsIHRvdGFsUGFnZXM6IG51bWJlcik6IFBhZ2VzTW9kZWxbXTtcbiAgICBwcm90ZWN0ZWQgY2FsY3VsYXRlVG90YWxQYWdlcygpOiBudW1iZXI7XG59XG4iXX0=